
import { SalesData } from '@/types';

export class ReportExporter {
  // Helper method to prepare data for download
  private static prepareDataForDownload(content: string, filename: string, type: string): void {
    const blob = new Blob([content], { type });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    
    // Clean up
    setTimeout(() => {
      URL.revokeObjectURL(url);
      document.body.removeChild(link);
    }, 0);
  }
  
  // Export sales data as CSV
  static exportCSV(data: SalesData[], reportTitle: string): void {
    const headers = ['Date', 'Sales', 'Transactions'];
    const csvContent = [
      headers.join(','),
      ...data.map(item => [
        item.date,
        item.sales,
        item.transactions
      ].join(','))
    ].join('\n');
    
    const filename = `${reportTitle.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`;
    this.prepareDataForDownload(csvContent, filename, 'text/csv');
  }
  
  // Export sales data as PDF (basic version)
  static exportPDF(data: SalesData[], reportTitle: string): void {
    if (!window) {
      console.error('Window object not available');
      return;
    }
    
    // Create a new window for the report
    const reportWindow = window.open('', '_blank');
    if (!reportWindow) {
      console.error('Could not open window for PDF report');
      return;
    }
    
    // Simple HTML content that can be printed as PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${reportTitle}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          h1 { color: #333; }
          table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
          .report-footer { margin-top: 30px; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <h1>${reportTitle}</h1>
        <p>Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
        
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Sales</th>
              <th>Transactions</th>
            </tr>
          </thead>
          <tbody>
            ${data.map(item => `
              <tr>
                <td>${item.date}</td>
                <td>$${item.sales.toFixed(2)}</td>
                <td>${item.transactions}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <div class="report-footer">
          <p>This report is auto-generated by POS System</p>
        </div>
        
        <script>
          // Auto print
          window.onload = function() {
            window.print();
          }
        </script>
      </body>
      </html>
    `;
    
    reportWindow.document.open();
    reportWindow.document.write(htmlContent);
    reportWindow.document.close();
  }
}
